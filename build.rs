extern crate cbindgen;

use std::env;
use std::path::PathBuf;

fn main() {
    let crate_dir = env::var("CARGO_MANIFEST_DIR").unwrap();
    let package_name = env::var("CARGO_PKG_NAME").unwrap();

    // Define the output path for the header file
    let header_output_path = PathBuf::from(&crate_dir).join("headers");
    if !header_output_path.exists() {
        std::fs::create_dir_all(&header_output_path).expect("Failed to create headers directory");
    }
    let output_file = header_output_path
        .join(format!("{}.h", package_name))
        .display()
        .to_string();

    let mut config = cbindgen::Config::default();
    config.language = cbindgen::Language::C;
    // Add other configurations here if needed, for example:
    // config.include_guard = Some(format!("{}_h", package_name.to_uppercase()));
    // config.autogen_warning = Some("/* Generated by cbindgen, do not edit by hand */".to_string());

    cbindgen::Builder::new()
        .with_crate(&crate_dir)
        .with_config(config)
        .generate()
        .expect("Unable to generate bindings")
        .write_to_file(&output_file);
}
